{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;\n/*\r\nconst counterReducer = (state = initialState, action) => {\r\n    if (action.type === 'increment') {\r\n        return {\r\n            counter: state.counter + 1,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n\r\n    if (action.type === 'increase') {\r\n        return {\r\n            counter: state.counter + action.amount,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n\r\n    if (action.type === 'toggle') {\r\n        return {\r\n            showCounter: !state.showCounter,\r\n            counter: state.counter\r\n        };\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n */","map":{"version":3,"sources":["C:/Users/kkurt/Desktop/projects/react-complete-guide/src/store/index.js"],"names":["configureStore","createSlice","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counter","counterSlice","auth","counterActions","actions","authActions"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,WAAxB,QAA0C,kBAA1C;AAGA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,eAAe,EAAE;AADI,CAAzB;AAIA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC1BI,EAAAA,IAAI,EAAE,gBADoB;AAE1BC,EAAAA,YAAY,EAAEJ,gBAFY;AAG1BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,CAACC,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACN,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAINO,IAAAA,MAAM,CAACD,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACN,eAAN,GAAwB,KAAxB;AACH;;AANK;AAHgB,CAAD,CAA7B;AAaA,MAAMQ,KAAK,GAAGX,cAAc,CAAC;AACzBY,EAAAA,OAAO,EAAE;AAACC,IAAAA,OAAO,EAAEC,YAAY,CAACF,OAAvB;AAAgCG,IAAAA,IAAI,EAAEX,SAAS,CAACQ;AAAhD;AADgB,CAAD,CAA5B;AAIA,OAAO,MAAMI,cAAc,GAAGF,YAAY,CAACG,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGd,SAAS,CAACa,OAA9B;AACP,eAAeN,KAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'authentication',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state) {\r\n            state.isAuthenticated = true;\r\n        },\r\n        logout(state) {\r\n            state.isAuthenticated = false;\r\n        },\r\n    }\r\n});\r\n\r\nconst store = configureStore({\r\n    reducer: {counter: counterSlice.reducer, auth: authSlice.reducer}\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;\r\n\r\n\r\n/*\r\nconst counterReducer = (state = initialState, action) => {\r\n    if (action.type === 'increment') {\r\n        return {\r\n            counter: state.counter + 1,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n\r\n    if (action.type === 'increase') {\r\n        return {\r\n            counter: state.counter + action.amount,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        };\r\n    }\r\n\r\n    if (action.type === 'toggle') {\r\n        return {\r\n            showCounter: !state.showCounter,\r\n            counter: state.counter\r\n        };\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n */"]},"metadata":{},"sourceType":"module"}