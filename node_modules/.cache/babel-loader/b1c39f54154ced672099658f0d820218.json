{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === 'BLUR') {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === 'RESET') {\n    return {\n      isTouched: false,\n      value: ''\n    };\n  }\n\n  return inputStateReducer;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    });\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: 'BLUR'\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError: hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/kkurt/Desktop/projects/react-complete-guide/src/hooks/use-input.js"],"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,EADe;AAEtBC,EAAAA,SAAS,EAAE;AAFW,CAA1B;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAGA,MAAM,CAACC,IAAP,KAAgB,OAAnB,EAA4B;AACxB,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACH;;AACD,MAAGG,MAAM,CAACC,IAAP,KAAgB,MAAnB,EAA2B;AACvB,WAAO;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,KAAP;AACH;;AACD,MAAGI,MAAM,CAACC,IAAP,KAAgB,OAAnB,EAA4B;AACxB,WAAO;AAAEJ,MAAAA,SAAS,EAAE,KAAb;AAAoBD,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACH;;AACD,SAAOE,iBAAP;AACH,CAXD;;AAaA,MAAMI,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACI,iBAAD,EAAoBH,iBAApB,CAAzC;AAGA,QAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAGC,KAAK,IAAI;AAChCJ,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAE,OAAP;AAAgBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAApC,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMe,gBAAgB,GAAGF,KAAK,IAAI;AAC9BJ,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMW,KAAK,GAAG,MAAM;AAChBP,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAIA,SAAO;AACHL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADf;AACsBiB,IAAAA,OAAO,EAAEP,YAD/B;AAC6CC,IAAAA,QAAQ,EAAEA,QADvD;AACiEC,IAAAA,kBADjE;AACqFG,IAAAA,gBADrF;AACuGC,IAAAA;AADvG,GAAP;AAGH,CAtBD;;GAAMV,Q;;AAwBN,eAAeA,QAAf","sourcesContent":["import {useReducer} from \"react\";\r\n\r\nconst initialInputState = {\r\n    value: '',\r\n    isTouched: false,\r\n};\r\n\r\nconst inputStateReducer = (state, action) => {\r\n    if(action.type === 'INPUT') {\r\n        return { value: action.value, isTouched: state.isTouched };\r\n    }\r\n    if(action.type === 'BLUR') {\r\n        return { isTouched: true, value: state.value };\r\n    }\r\n    if(action.type === 'RESET') {\r\n        return { isTouched: false, value: '' };\r\n    }\r\n    return inputStateReducer;\r\n};\r\n\r\nconst useInput = (validateValue) => {\r\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState)\r\n\r\n\r\n    const valueIsValid = validateValue(inputState.value);\r\n    const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n    const valueChangeHandler = event => {\r\n        dispatch({type: 'INPUT', value: event.target.value});\r\n    };\r\n\r\n    const inputBlurHandler = event => {\r\n        dispatch({type: 'BLUR'});\r\n    }\r\n\r\n    const reset = () => {\r\n        dispatch({type: 'RESET'});\r\n    };\r\n\r\n    return {\r\n        value: inputState.value, isValid: valueIsValid, hasError: hasError, valueChangeHandler, inputBlurHandler, reset\r\n    };\r\n};\r\n\r\nexport default useInput;"]},"metadata":{},"sourceType":"module"}